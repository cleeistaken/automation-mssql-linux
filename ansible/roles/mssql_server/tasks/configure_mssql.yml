---
#
# Firewall Port
#
- name: "Configure UFW for TCP/{{ mssql_port | default(default_mssql_port) }}"
  community.general.ufw:
    rule: allow
    port: "{{ mssql_port | default(default_mssql_port) }}"
    proto: tcp
    state: reloaded

#
# Directories
#
- name: Generate folders and error log file names
  set_fact:
    filename_errorlog: "{{ ((mssql_directory_errorlogs | default(default_mssql_directory_errorlogs)), (mssql_error_log_filename | default(default_mssql_error_log_filename))) | path_join }}"
    directory_data: "{{ mssql_directory_data | default(default_mssql_directory_data) }}"
    directory_log: "{{ mssql_directory_log | default(default_mssql_directory_log) }}"
    directory_backup: "{{ mssql_directory_backup | default(default_mssql_directory_backup) }}"
    directory_dump:  "{{ mssql_directory_dump | default(default_mssql_directory_dump) }}"
    directory_audit: "{{ mssql_directory_audit | default(default_mssql_directory_audit) }}"
    directory_error: "{{ mssql_directory_errorlogs | default(default_mssql_directory_errorlogs) }}"

- name: Generate directory and settings lists
  set_fact:
    mssql_directories:
      - "{{ directory_data }}"
      - "{{ directory_log }}"
      - "{{ directory_backup }}"
      - "{{ directory_dump }}"
      - "{{ directory_audit }}"
      - "{{ directory_error }}"
    mssql_directory_settings:
      - "filelocation.defaultdatadir"
      - "filelocation.defaultlogdir"
      - "filelocation.defaultbackupdir"
      - "filelocation.defaultdumpdir"
      - "filelocation.errorlogfile"
    mssql_directory_values:
      - "{{ directory_data }}"
      - "{{ directory_log }}"
      - "{{ directory_backup }}"
      - "{{ directory_dump }}"
      - "{{ filename_errorlog }}"

- name: Create MSSQL server directories
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ mssql_directory_user | default(default_mssql_directory_user) }}"
    group: "{{ mssql_directory_group | default(default_mssql_directory_group) }}"
    mode: "{{ mssql_directory_mode | default(default_mssql_directory_mode) }}"
    state: directory
    recurse: yes
  loop: "{{ mssql_directories }}"

- name: Set the MSSQL server directory settings
  ansible.builtin.command: "{{ mssql_bin_path }}/mssql-conf set {{ item.0 }} {{ item.1 }}"
  with_together:
    - "{{ mssql_directory_settings }}"
    - "{{ mssql_directory_values }}"

#
# Trace flags
# Todo
# - check the output
- name: "Setting trace flags {{ mssql_trace_flags | default(default_mssql_trace_flags) | join(' ') }}"
  ansible.builtin.command: "{{ mssql_bin_path }}/mssql-conf traceflag {{ mssql_trace_flags | default(default_mssql_trace_flags) | join(' ') }} on"
  register: result

- name: Restart the MSSQL Server
  import_tasks: restart_mssql_server.yml

#
# Create User
#
- name: "Creating user {{ SQL_INSTALL_USER }}"
  ansible.builtin.command: >
    {{ mssql_tools_bin_path }}/sqlcmd 
    -s localhost 
    -U SA 
    -P "{{ mssql_sa_password | default(default_mssql_sa_password) }}"
    -Q "IF NOT EXISTS (SELECT name from sys.database_principals WHERE name = '{{ SQL_INSTALL_USER }}') BEGIN CREATE LOGIN [{{ SQL_INSTALL_USER }}] WITH PASSWORD=N'{{ SQL_INSTALL_USER_PASSWORD }}', DEFAULT_DATABASE=[master], CHECK_EXPIRATION=ON, CHECK_POLICY=ON; ALTER SERVER ROLE [sysadmin] ADD MEMBER [{{ SQL_INSTALL_USER }}] END;"
  register: result
  when: inventory_hostname == play_hosts[0]

#
# Enable HADR
#
- name: Enable MSSQL HADR
  ansible.builtin.command: >
    {{ mssql_bin_path }}/mssql-conf set hadr.hadrenabled  1

- name: Query the MSSQL HADR setting
  ansible.builtin.command: >
    {{ mssql_bin_path }}/mssql-conf get sqlagent
  register: result

- name: Ensure HADR is enabled
  ansible.builtin.assert:
    that:
      - result.rc == 0
      - result.stdout is search('hadrenabled : 1')
    fail_msg: "HADR is not enabled: {{ result.stdout }}"
    success_msg: "HADR is enabled"

#
# SQL Server Agent
#
- name: Enable the SQL Server Agent
  ansible.builtin.command: >
    {{ mssql_bin_path }}/mssql-conf set sqlagent.enabled true

- name: Query the SQL Server Agent setting
  ansible.builtin.command: >
    {{ mssql_bin_path }}/mssql-conf get sqlagent
  register: result

- name: Ensure SQL Agent is enabled
  ansible.builtin.assert:
    that:
      - result.rc == 0
      - result.stdout is search('enabled : true')
    fail_msg: "Agent is not enabled: {{ result.stdout }}"
    success_msg: "Agent is enabled"

#
# Logging Level
#
- name: Set logging level variable
  set_fact:
    logging_level: "{{ (mssql_agent_logging_level | default(default_mssql_agent_logging_level)) }}"

- name: Ensure the logging level is valid
  ansible.builtin.assert:
    that:
    - logging_level | int >= 1
    - logging_level | int <= 7
    fail_msg: "Logging level '{{ logging_level }}' is not valid "

- name: Set the MSSQL server agent logging level
  ansible.builtin.command: >
    {{ mssql_bin_path }}/mssql-conf set sqlagent.errorlogginglevel {{ logging_level }}

- name: Query the MSSQL agent settings
  ansible.builtin.command: >
    {{ mssql_bin_path }}/mssql-conf get sqlagent
  register: result

# The search function does not let us build the string in the function bracket, for
# some unknown and mysterious reason. So we build the query string here and use it
# and the function is happy.
- name: Build query
  set_fact:
    query_string: "errorlogginglevel : {{ logging_level }}"

- name: "Ensure MSSQL server agent logging level is set to {{ logging_level }}"
  ansible.builtin.assert:
    that:
      - result.rc == 0
      - result.stdout is search("{{ query_string }}")
    fail_msg: "Agent logging level is not set correctly: {{ result.stdout }}"
    success_msg: "Agent logging level is set correctly to {{ logging_level }}"

#
# SQL Server Agent Error Logfile
#
- name: Set sql agent error logfile variable
  set_fact:
    error_log_file: "{{ mssql_agent_error_log_file | default(default_mssql_agent_error_log_file) }}"

- name: Check if the path exists
  ansible.builtin.stat:
    path: "{{ error_log_file }}"
    get_md5: no
  register: stat_error_log_directory

- name: Ensure the agent error logfile directory parameter is valid
  ansible.builtin.assert:
    that:
    - stat_error_log_directory.stat.exists
    - stat_error_log_directory.stat.isdir
    fail_msg: "Audit directory '{{ error_log_file }}' does not appear valid "

- name: Set the MSSQL server agent error log file
  ansible.builtin.command: > 
    {{ mssql_bin_path }}/mssql-conf set sqlagent.errorlogfile {{ error_log_file }}

- name: Query the MSSQL server agent settings
  ansible.builtin.command: >
    {{ mssql_bin_path }}/mssql-conf get sqlagent
  register: result

# The search function does not let us build the string in the function bracket, for
# some unknown and mysterious reason. So we build the query string here and use it
# and the function is happy.
- name: Build query
  set_fact:
    query_string: "errorlogfile : {{ error_log_file }}"

- name: "Ensure the MSSQL server agent logging level is set to {{ error_log_file }}"
  ansible.builtin.assert:
    that:
      - result.rc == 0
      - result.stdout is search("{{ query_string }}")
    fail_msg: "Agent error log file is not set correctly {{ result.stdout }}"
    success_msg: "Agent error log file is set to {{ error_log_file }}"

#
# Telemetry Feedback
#
- name: Set the MSSQL telemetry customer feedback variable
  set_fact:
    feedback_enabled: "{{ 'true'|string|lower if (mssql_telemetry_customer_feedback | default(default_mssql_telemetry_customer_feedback)) else 'false'|string|lower }}"

- name: Set the MSSQL server telemetry customer feedback
  ansible.builtin.command: >
    {{ mssql_bin_path }}/mssql-conf set telemetry.customerfeedback {{ feedback_enabled }}

- name: Query the MSSQL server telemetry settings
  ansible.builtin.command: >
    {{ mssql_bin_path }}/mssql-conf get telemetry
  register: result

# The search function does not let us build the string in the function bracket, for
# some unknown and mysterious reason. So we build the query string here and use it
# and the function is happy.
- name: Build query
  set_fact:
    query_string: "customerfeedback : {{ feedback_enabled }}"

- name: "Ensure MSSQL server telemetry customer feedback is set to {{ parameter_string }}"
  ansible.builtin.assert:
    that:
      - result.rc == 0
      - result.stdout is search("{{ query_string }}")
    fail_msg: "Telemetry customer feedback is not set correctly {{ result.stdout }}"
    success_msg: "Telemetry customer feedback is set to {{ feedback_enabled }}"

#
# Telemetry User Requested Local Audit Directory
#
- name: Set the MSSQL telemetry user requested local audit directory
  set_fact:
    audit_directory: "{{ mssql_telemetry_user_requested_local_audit_directory | default(default_mssql_telemetry_user_requested_local_audit_directory)}}"

- name: Check if the path exists
  ansible.builtin.stat:
    path: "{{ audit_directory }}"
    get_md5: no
  register: stat_audit_directory

- name: Ensure the audit directory parameter is valid
  ansible.builtin.assert:
    that:
    - stat_audit_directory.stat.exists
    - stat_audit_directory.stat.isdir
    fail_msg: "Audit directory '{{ audit_directory }}' does not appear valid "

- name: Set the MSSQL server agent error log file
  ansible.builtin.command: >
    {{ mssql_bin_path }}/mssql-conf set telemetry.userrequestedlocalauditdirectory {{ audit_directory }}

- name: Query the MSSQL server agent settings
  ansible.builtin.command: >
    {{ mssql_bin_path }}/mssql-conf get telemetry
  register: result

# The search function does not let us build the string in the function bracket, for
# some unknown and mysterious reason. So we build the query string here and use it
# and the function is happy.
- name: Build query
  set_fact:
    query_string: "userrequestedlocalauditdirectory : {{ audit_directory }}"

- name: "Ensure the MSSQL user requested local audit directory is set to {{ audit_directory }}"
  ansible.builtin.assert:
    that:
      - result.rc == 0
      - result.stdout is search("{{ query_string }}")
    fail_msg: "Agent error log file is not set correctly {{ result.stdout }}"
    success_msg: "Agent error log file is set to {{ audit_directory }}"

#
# Coredump Type
#
- name: Set the MSSQL coredump type variable
  set_fact:
    coredump_type: "{{ sql_coredump_type | default(default_sql_coredump_type) }}"

- name: Ensure coredump type is valid
  ansible.builtin.assert:
    that:
      - coredump_type in ['mini', 'miniplus', 'filtered', 'full']
    fail_msg: "Coredump type '{{ coredump_type }}' does not appear valid "

- name: Set the MSSQL server agent error log file
  ansible.builtin.command: >
    {{ mssql_bin_path }}/mssql-conf set coredump.coredumptype {{ coredump_type }}

- name: Query the MSSQL server agent settings
  ansible.builtin.command: >
    {{ mssql_bin_path }}/mssql-conf get coredump
  register: result

# The search function does not let us build the string in the function bracket, for
# some unknown and mysterious reason. So we build the query string here and use it
# and the function is happy.
- name: Build query
  set_fact:
    query_string: "coredumptype : {{ coredump_type }}"

- name: "Ensure the MSSQL server coredump type is set to {{ coredump_type }}"
  ansible.builtin.assert:
    that:
      - result.rc == 0
      - result.stdout is search("{{ query_string }}")
    fail_msg: "Coredump type is not set correctly {{ result.stdout }}"
    success_msg: "Coredump type is set to {{ coredump_type }}"

#
# Restart MSSQL Server
#
- name: Restart MSSQL Server
  include_tasks:
    file: restart_mssql_server.yml
