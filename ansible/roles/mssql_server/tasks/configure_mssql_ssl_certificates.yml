---
#
# https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-create-availability-group?view=sql-server-ver15
#
- name: Create sanitized hostnames for mssql
  set_fact:
    ansible_hostname_sanitized_list: "{{ groups['mssql_linux_vm'] | map('extract', hostvars, 'ansible_hostname') | list  | map('regex_replace', '-', '_') | list }}"
    ansible_hostname_sanitized: "{{ ansible_hostname | regex_replace('-', '_') }}"

- name: Create master key encryption by password
  ansible.builtin.command: >
    {{ mssql_tools_bin_path }}/sqlcmd 
    -s localhost 
    -U SA 
    -P "{{ mssql_sa_password | default(default_mssql_sa_password) }}"
    -Q "IF NOT EXISTS (SELECT name FROM sys.symmetric_keys WHERE name LIKE '%DatabaseMasterKey%') BEGIN CREATE MASTER KEY ENCRYPTION BY PASSWORD = '{{ mssql_sa_password | default(default_mssql_sa_password) }}' END;"
  register: result

- name: Validate the master key was created successfully
  ansible.builtin.assert:
    that: result.stdout | length == 0
    fail_msg: "{{ result.stdout }}"
    success_msg: "Master key created successfully."

- name: Create certificate
  ansible.builtin.command: >
    {{ mssql_tools_bin_path }}/sqlcmd 
    -s localhost 
    -U SA 
    -P "{{ mssql_sa_password | default(default_mssql_sa_password) }}"
    -Q "IF NOT EXISTS (SELECT name FROM sys.certificates WHERE name = '{{ ansible_hostname_sanitized }}_cert') BEGIN CREATE CERTIFICATE {{ ansible_hostname_sanitized }}_cert WITH SUBJECT = '{{ ansible_hostname }} AG Certificate' END;"
  register: result

- name: Validate the certificate was created successfully
  ansible.builtin.assert:
    that: result.stdout | length == 0
    fail_msg: "{{ result.stdout }}"
    success_msg: "Certificate {{ ansible_hostname_sanitized }}_cert created successfully"

- name: Delete previous certificate backup
  ansible.builtin.file:
    path: "{{ mssql_directory_cert | default(default_mssql_directory_cert) }}/{{ ansible_hostname_sanitized }}_cert.cer"
    state: absent

- name: Backup certificate
  ansible.builtin.command: >
    {{ mssql_tools_bin_path }}/sqlcmd 
    -s localhost 
    -U SA 
    -P "{{ mssql_sa_password | default(default_mssql_sa_password) }}"
    -Q "BACKUP CERTIFICATE {{ ansible_hostname_sanitized }}_cert TO FILE = '{{ mssql_directory_cert | default(default_mssql_directory_cert) }}/{{ ansible_hostname_sanitized }}_cert.cer';"
  register: result

- name: Stat backup file
  ansible.builtin.stat:
    path: "{{ mssql_directory_cert | default(default_mssql_directory_cert) }}/{{ ansible_hostname_sanitized }}_cert.cer"
    get_checksum: no
  register: file_stat

- name: Validate the certificate was backed up successfully
  ansible.builtin.assert:
    that:
      - result.stdout | length == 0
      - file_stat.stat.exists
    fail_msg: "{{ result.stdout }}"
    success_msg: "Certificate {{ ansible_hostname_sanitized }}_cert backed up to {{ mssql_directory_cert | default(default_mssql_directory_cert) }}/{{ ansible_hostname_sanitized }}_cert.cer"

- name: "Create endpoint {{ mssql_ag_endpoint | default(default_mssql_ag_endpoint) }} with listener on port {{ mssql_endpoint_listener_port | default(default_mssql_endpoint_listener_port) }}"
  ansible.builtin.command: >
    {{ mssql_tools_bin_path }}/sqlcmd 
    -s localhost 
    -U SA 
    -P "{{ mssql_sa_password | default(default_mssql_sa_password) }}"
    -Q "IF NOT EXISTS (SELECT name FROM sys.endpoints WHERE name LIKE '{{ mssql_ag_endpoint | default(default_mssql_ag_endpoint) }}') BEGIN CREATE ENDPOINT {{ mssql_ag_endpoint | default(default_mssql_ag_endpoint) }} STATE = STARTED AS TCP (LISTENER_PORT = {{ mssql_endpoint_listener_port | default(default_mssql_endpoint_listener_port) }}, LISTENER_IP = ALL) FOR DATABASE_MIRRORING (AUTHENTICATION = CERTIFICATE {{ ansible_hostname_sanitized }}_cert, ROLE = ALL) END;"
  register: result

- name: Validate the endpoint was created successfully
  ansible.builtin.assert:
    that: result.stdout | length == 0
    fail_msg: "{{ result.stdout }}"
    success_msg: "Endpoint {{ mssql_ag_endpoint | default(default_mssql_ag_endpoint) }} created successfully"

- name: Fetch generated certificates
  ansible.builtin.fetch:
    src: "{{ mssql_directory_cert | default(default_mssql_directory_cert) }}/{{ ansible_hostname_sanitized }}_cert.cer"
    dest: "{{ playbook_dir }}/../config/"
    flat: yes

- name: Copy newly generated SSL certificates to other hosts
  ansible.builtin.copy:
    src: "/opt/automation/automation-mssql-linux/config/{{ item }}_cert.cer"
    dest: "{{ mssql_directory_cert | default(default_mssql_directory_cert) }}/{{ item }}_cert.cer"
    owner: mssql
    group: mssql
    mode: '660'
  loop: "{{ ansible_hostname_sanitized_list }}"

- name: Create instance level logins
  ansible.builtin.command: >
    {{ mssql_tools_bin_path }}/sqlcmd
    -s localhost
    -U SA
    -P "{{ mssql_sa_password | default(default_mssql_sa_password) }}"
    -Q "IF NOT EXISTS (SELECT name FROM master.sys.server_principals WHERE name = '{{ item }}_login') BEGIN CREATE LOGIN {{ item }}_login WITH PASSWORD = N'{{ mssql_sa_password | default(default_mssql_sa_password) }}' END;"
  register: result
  when:
    - item != ansible_hostname_sanitized
  with_items: "{{ ansible_hostname_sanitized_list }}"

- name: Create instance user
  ansible.builtin.command: >
    {{ mssql_tools_bin_path }}/sqlcmd
    -s localhost
    -U SA
    -P "{{ mssql_sa_password | default(default_mssql_sa_password) }}"
    -Q "IF NOT EXISTS (SELECT name FROM sys.database_principals WHERE name = '{{ item }}_user') BEGIN CREATE USER {{ item }}_user FOR LOGIN {{ item }}_login END;"
  register: result
  when:
    - item != ansible_hostname_sanitized
  with_items: "{{ ansible_hostname_sanitized_list }}"

- name: Restore other node certificates
  ansible.builtin.command: >
    {{ mssql_tools_bin_path }}/sqlcmd
    -s localhost
    -U SA
    -P "{{ mssql_sa_password | default(default_mssql_sa_password) }}"
    -Q "IF NOT EXISTS (SELECT name FROM sys.certificates WHERE name = '{{ item }}_cert') BEGIN CREATE CERTIFICATE {{ item }}_cert AUTHORIZATION {{ item }}_user FROM FILE = '{{ mssql_directory_cert | default(default_mssql_directory_cert) }}/{{ item }}_cert.cer' END;"
  register: result
  when:
  - item != ansible_hostname_sanitized
  with_items: "{{ ansible_hostname_sanitized_list }}"

- name: Grant login to other nodes
  ansible.builtin.command: >
    {{ mssql_tools_bin_path }}/sqlcmd
    -s localhost
    -U SA
    -P "{{ mssql_sa_password | default(default_mssql_sa_password) }}"
    -Q "GRANT CONNECT ON ENDPOINT::{{ mssql_ag_endpoint | default(default_mssql_ag_endpoint) }} TO {{ item }}_login;"
  register: result
  when:
  - item != ansible_hostname_sanitized
  with_items: "{{ ansible_hostname_sanitized_list }}"
